{"version":3,"file":"static/js/709.96bf3c6d.chunk.js","mappings":"sLAGA,MAAMA,EAAkBC,EAAAA,MAAW,IAAM,gCAEnCC,GAAOC,EAAAA,EAAAA,GAAsBC,KA2FnC,EAzFgBC,IAAuB,IAAtB,OAACC,EAAM,OAAEC,GAAOF,EAC7B,MAAOG,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KAEFC,MAAM,GAADC,OAAIC,+BAAiC,uBAAAD,OAAsBN,IAC3DQ,MAAKC,IACF,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,+BAEpB,OAAOF,EAAIG,MAAM,IAEpBJ,MAAKP,IACFC,EAAQD,EAAK,IAEhBY,OAAMC,GAAOC,QAAQC,MAAM,uBAAwBF,IAG9C,GACf,CAACd,IAEJ,MAoBM,QAAEiB,EAAO,QAAEC,EAAO,WAAEC,GApBHC,MACnB,GAAoB,IAAhBnB,EAAKoB,OACL,MAAO,CACHJ,QAAS,GACTC,QAAS,GACTC,WAAY,IAQpB,MAAO,CACHF,QALYhB,EAAKqB,KAAIC,GAAQA,EAAKC,KAMlCN,QALYjB,EAAKqB,KAAIC,GAAQA,EAAKE,QAMlCN,WALelB,EAAKqB,KAAI,CAACC,EAAMG,IAAK,WAAApB,OAAgBoB,EAAQ,KAM/D,EAGoCN,GAGnCO,EAAS,CACX1B,KAAM,CAAC,CACH2B,EAAGX,EACHY,EAAGX,EACHY,KAAM,UACNC,KAAM,gBACNC,OAAQ,CACJC,MAAO,OACPC,KAAM,GACNC,KAAM,CAAEC,MAAO,IAEnBC,KAAMlB,EACNmB,KAAM,mBAEVC,OAAQ,CACJH,MAAO,IACPI,OAAQ,IACRC,MAAO,iBACPC,MAAO,CACHD,MAAO,WACPE,MAAO,CAAC,EAAG,IACXC,SAAU3B,EACV4B,SAAU5B,EAAQK,KAAIwB,GAAG,GAAAxC,OAAOwC,MAEpCC,MAAO,CACHN,MAAO,MACPE,MAAO,CAAC,GAAI,KACZC,SAAUI,MAAMC,KAAK,CAAC5B,OAAQ,KAAK,CAAC6B,EAAGC,IAAM,GAAS,EAAJA,OAK9D,OACIC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAC3D,EAAI,CACDM,KAAM0B,EAAO1B,KACbsC,OAAQZ,EAAOY,UAEnBe,EAAAA,EAAAA,KAAC7D,EAAe,CAAC8D,UAAWvD,KAC5BsD,EAAAA,EAAAA,KAAA,UAAQE,UAAU,kBAAkBC,QAAS1D,EAAOsD,SAAC,sBACnD,C","sources":["components/graphic.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Plotly from 'plotly.js-dist';  \nimport createPlotlyComponent from 'react-plotly.js/factory';\nconst AddWeightRecord = React.lazy(() => import('./forms/addWeightRecord'));\n\nconst Plot = createPlotlyComponent(Plotly);\n\nconst Graphic = ({onBack, client}) => {\n    const [data, setData] = useState([]);  \n\n    useEffect(() => {\n        const fetchRecords = () => {\n            fetch(`${process.env.REACT_APP_BACKEND_URL}api/weight_graphic/${client}`)\n                .then(res => {\n                    if (!res.ok) {\n                        throw new Error('Network response was not ok');\n                    }\n                    return res.json();\n                })\n                .then(data => {\n                    setData(data);  \n                })\n                .catch(err => console.error('Error fetching data:', err));\n        };\n\n        fetchRecords();  // Llama a fetchRecords dentro del efecto\n    }, [client]);  // Añade client al array de dependencias si es necesario\n\n    const buildChartData = () => {\n        if (data.length === 0) {\n            return {\n                xValues: [], \n                yValues: [],  \n                textValues: [] \n            };\n        }\n\n        const xValues = data.map(item => item.id);  \n        const yValues = data.map(item => item.value); \n        const textValues = data.map((item, index) => `Session ${index + 1}`); \n\n        return {\n            xValues,\n            yValues,\n            textValues\n        };\n    };\n\n    const { xValues, yValues, textValues } = buildChartData();\n\n    // Configuración de la figura de Plotly\n    const figure = {\n        data: [{\n            x: xValues,\n            y: yValues,\n            type: 'scatter',\n            mode: 'lines+markers',\n            marker: { \n                color: 'blue',\n                size: 12, \n                line: { width: 2 } \n            },\n            text: textValues,  \n            name: 'Weight Graphic'\n        }],\n        layout: {\n            width: 800,\n            height: 400,\n            title: 'Weight Graphic',\n            xaxis: {\n                title: 'Sessions',\n                range: [0, 12], \n                tickvals: xValues, \n                ticktext: xValues.map(val => `${val}`) \n            },\n            yaxis: {\n                title: 'Kgs',\n                range: [40, 100],  \n                tickvals: Array.from({length: 13}, (_, i) => 40 + i * 5),  // Valores de las marcas del eje y desde 40 a 100 con incremento de 5\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h2>Line Chart</h2>\n            <Plot\n                data={figure.data}\n                layout={figure.layout}\n            />\n            <AddWeightRecord client_id={client}/>\n            <button className='btn btn-primary' onClick={onBack}>Back to clients</button>\n        </div>\n    );\n};\n\nexport default Graphic;\n"],"names":["AddWeightRecord","React","Plot","createPlotlyComponent","Plotly","_ref","onBack","client","data","setData","useState","useEffect","fetch","concat","process","then","res","ok","Error","json","catch","err","console","error","xValues","yValues","textValues","buildChartData","length","map","item","id","value","index","figure","x","y","type","mode","marker","color","size","line","width","text","name","layout","height","title","xaxis","range","tickvals","ticktext","val","yaxis","Array","from","_","i","_jsxs","children","_jsx","client_id","className","onClick"],"sourceRoot":""}